name: Déploiement CI/CD de l'application Node.js sur EC2

on:
  push:
    branches:
      - main # Déclencher ce workflow à chaque 'push' sur la branche principale
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    
    # 1. Récupération du code
    - name: 📦 Récupération du Code
      uses: actions/checkout@v4
      
    # # 2. Configuration de l'environnement Node.js (avec pnpm)
    # - name: ⚙️ Configuration de Node.js et pnpm
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: '20' # Assurez-vous d'utiliser la bonne version
    #     cache: 'pnpm'       # Active la mise en cache des dépendances pnpm
        
    - name: 📥 Installation de pnpm
      run: npm install -g pnpm # Installe pnpm globalement
        
    # 3. Installation des dépendances et Build (Exécuté sur GitHub)
    - name: 🏗️ Installation (pnpm) et Construction du Projet
      run: |
        pnpm install  # Utilise pnpm pour installer les dépendances
        pnpm run build # Utilise pnpm pour lancer la commande de construction
        
    # --- Déploiement vers EC2 ---

    # 4. Transfert des Fichiers (SCP - Secure Copy)
    - name: 💾 Transfert des Fichiers (SCP)
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "." 
        target: "/home/${{ secrets.EC2_USER }}/myapp" 
        
    # 5. Redémarrage de l'Application (SSH - Remote Command)
    - name: 🔄 Redémarrage de l'Application (SSH)
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          APP_DIR="/home/${{ secrets.EC2_USER }}/myapp" 
          # --- NOUVELLE LOGIQUE DE DÉMARRAGE ---
          
          # 1. Se déplacer dans le répertoire de l'application transférée
          cd $APP_DIR 
          
          # 2. Exécuter l'installation des dépendances de production
          # C'est souvent nécessaire si le build utilise des packages, mais l'exécution aussi.
          # Si le dossier 'build' est 100% autonome, sautez cette ligne.
          pnpm install --prod 

          # 3. Démarrer/Redémarrer PM2 en pointant vers le dossier 'build'
          # Nous supposons que le point d'entrée est dans 'build', et que PM2 doit s'y lancer.
          # S'il existe déjà, PM2 le met à jour, sinon il le démarre.
          
          # --- OPTION 1: PM2 démarre le script direct dans /build ---
          # Remplacez index.js par votre point d'entrée réel (ex: server.js)
          PM2_COMMAND="pm2 start $APP_DIR/build/index.js --name \"my-node-app\""
          
          # Si l'application existe, utilisez 'reload' (pour un redémarrage doux)
          # Sinon, utilisez la commande de 'start' complète
          pm2 describe my-node-app > /dev/null
          if [ $? -eq 0 ]; then
            pm2 reload my-node-app
          else
            $PM2_COMMAND
          fi
          
          pm2 save 