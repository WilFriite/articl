name: D√©ploiement CI/CD de l'application Node.js sur EC2

on:
  push:
    branches:
      - main # D√©clencher ce workflow √† chaque 'push' sur la branche principale
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    
    # 1. R√©cup√©ration du code
    - name: üì¶ R√©cup√©ration du Code
      uses: actions/checkout@v4
      
    # # 2. Configuration de l'environnement Node.js (avec pnpm)
    # - name: ‚öôÔ∏è Configuration de Node.js et pnpm
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: '20' # Assurez-vous d'utiliser la bonne version
    #     cache: 'pnpm'       # Active la mise en cache des d√©pendances pnpm
        
    - name: üì• Installation de pnpm
      run: npm install -g pnpm # Installe pnpm globalement
        
    # 3. Installation des d√©pendances et Build (Ex√©cut√© sur GitHub)
    - name: üèóÔ∏è Installation (pnpm) et Construction du Projet
      run: |
        pnpm install  # Utilise pnpm pour installer les d√©pendances
        pnpm run build # Utilise pnpm pour lancer la commande de construction
        
    # --- D√©ploiement vers EC2 ---

    # 4. Transfert des Fichiers (SCP - Secure Copy)
    - name: üíæ Transfert des Fichiers (SCP)
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "." 
        target: "/home/${{ secrets.EC2_USER }}/myapp" 
        
    # 5. Red√©marrage de l'Application (SSH - Remote Command)
    - name: üîÑ Red√©marrage de l'Application (SSH)
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          APP_DIR="/home/${{ secrets.EC2_USER }}/myapp" 
          cd $APP_DIR
          
          # Remarque : La machine EC2 doit d√©j√† avoir Node.js et PM2 install√©s (voir script d'initialisation).
          # PM2 ex√©cute 'npm start' par d√©faut si le 'package.json' est dans le r√©pertoire.
          # Si vous avez besoin que PM2 utilise pnpm pour d√©marrer, changez la commande :
          # pm2 reload my-node-app || pm2 start pnpm --name "my-node-app" -- start
          
          pm2 reload my-node-app || pm2 start npm --name "my-node-app" -- start 
          
          pm2 save